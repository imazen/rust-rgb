name: Test Downstream Compatibility

on:
  pull_request:
  push:
    branches:
      - '**'
    tags:
      - '**'
  release:
    types: [published, created]

# Configure your downstream crates here (comma-separated)
env:
  DOWNSTREAM_CRATES: "load_image,cavif,dssim,usc,okhsl,kapy,fecund_font_flounder,feather-ui,unitedservices_common"

jobs:
  test-dependents:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract crate metadata
        id: metadata
        run: |
          CRATE_NAME=$(grep -m1 '^name = ' Cargo.toml | sed 's/name = "\(.*\)"/\1/')
          echo "crate-name=$CRATE_NAME" >> $GITHUB_OUTPUT
          echo "repo-name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
          echo "repo-owner=${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          echo "ref-name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "event-name=${{ github.event_name }}" >> $GITHUB_OUTPUT
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TEST_TYPE="Pull Request #${{ github.event.pull_request.number }}"
            TEST_REF="${{ github.event.pull_request.head.sha }}"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            TEST_TYPE="Release ${{ github.event.release.tag_name }}"
            TEST_REF="${{ github.event.release.tag_name }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TEST_TYPE="Tag ${{ github.ref_name }}"
            TEST_REF="${{ github.ref_name }}"
          else
            TEST_TYPE="Push to ${{ github.ref_name }}"
            TEST_REF="${{ github.sha }}"
          fi
          
          echo "test-type=$TEST_TYPE" >> $GITHUB_OUTPUT
          echo "test-ref=$TEST_REF" >> $GITHUB_OUTPUT
          
          echo "Testing crate: $CRATE_NAME"
          echo "Test type: $TEST_TYPE"
      
      - name: Configure downstream crates
        id: config
        run: |
          # Use environment variable or fall back to file
          if [ -n "${{ env.DOWNSTREAM_CRATES }}" ]; then
            CRATES="${{ env.DOWNSTREAM_CRATES }}"
            echo "source=configured" >> $GITHUB_OUTPUT
          elif [ -f .github/downstream-crates.txt ]; then
            CRATES=$(cat .github/downstream-crates.txt | tr '\n' ',' | sed 's/,$//')
            echo "source=file" >> $GITHUB_OUTPUT
          else
            CRATES=""
            echo "source=none" >> $GITHUB_OUTPUT
          fi
          
          echo "crates=$CRATES" >> $GITHUB_OUTPUT
          echo "Testing against: $CRATES"
      
      - name: Prepare test script
        run: |
          chmod +x .github/scripts/test-downstream.sh
      
      - name: Run tests in sandbox
        id: test-run
        continue-on-error: true
        run: |
          mkdir -p results
          chmod 777 results  # Ensure Docker can write to it
          
          docker run --rm \
            --memory="8g" \
            --cpus="4" \
            --security-opt=no-new-privileges \
            --cap-drop=ALL \
            --pids-limit=200 \
            -v $(pwd):/workspace:rw \
            -v downstream-cargo-cache-${{ github.repository_owner }}-${{ github.event.repository.name }}:/usr/local/cargo/registry \
            -v downstream-cargo-git-${{ github.repository_owner }}-${{ github.event.repository.name }}:/usr/local/cargo/git \
            -w /workspace \
            rust:latest \
            bash /workspace/.github/scripts/test-downstream.sh \
              "${{ steps.metadata.outputs.crate-name }}" \
              "/workspace" \
              "${{ steps.metadata.outputs.test-type }}" \
              "${{ steps.metadata.outputs.test-ref }}" \
              "${{ steps.metadata.outputs.repo-owner }}" \
              "${{ steps.metadata.outputs.repo-name }}" \
              "${{ steps.config.outputs.source }}" \
              "${{ steps.config.outputs.crates }}"
          
          # Copy results out
          if [ -f results.md ]; then
            mv results.md results/
          fi
          if [ -f stats.env ]; then
            mv stats.env results/
          fi
      
      - name: Process results
        id: results
        if: always()
        run: |
          if [ -f results/results.md ]; then
            cat results/results.md
            
            {
              echo "markdown<<EOF"
              cat results/results.md
              echo "EOF"
            } >> $GITHUB_OUTPUT
            
            if [ -f results/stats.env ]; then
              source results/stats.env
              echo "passed=$PASSED" >> $GITHUB_OUTPUT
              echo "failed=$FAILED" >> $GITHUB_OUTPUT
              echo "timeout=$TIMEOUT" >> $GITHUB_OUTPUT
              echo "skip=$SKIP" >> $GITHUB_OUTPUT
              echo "duration=$TOTAL_DURATION" >> $GITHUB_OUTPUT
              
              echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
              echo "- ✓ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
              echo "- ✗ Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
              echo "- ⏱ Timeout: $TIMEOUT" >> $GITHUB_STEP_SUMMARY
              echo "- ⚠ Skipped: $SKIP" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "markdown=❌ Test execution failed - no results generated" >> $GITHUB_OUTPUT
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Comment on Pull Request
        if: |
          always() && 
          github.event_name == 'pull_request' &&
          steps.results.outputs.markdown != ''
        uses: actions/github-script@v7
        with:
          script: |
            const markdown = `${{ steps.results.outputs.markdown }}`;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🧪 Downstream Compatibility Test Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: markdown
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: markdown
              });
            }
      
      - name: Add to release notes
        if: |
          always() &&
          github.event_name == 'release' &&
          steps.results.outputs.markdown != ''
        uses: actions/github-script@v7
        with:
          script: |
            const markdown = `${{ steps.results.outputs.markdown }}`;
            const release = context.payload.release;
            
            const newBody = (release.body || '') + '\n\n' + markdown;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: newBody
            });
      
      - name: Report final status
        if: always()
        run: |
          echo "::notice title=Downstream Tests::Passed: ${{ steps.results.outputs.passed }}, Failed: ${{ steps.results.outputs.failed }}, Timeout: ${{ steps.results.outputs.timeout }}, Skipped: ${{ steps.results.outputs.skip }}"
          
          # Fail the workflow if tests failed
          if [ "${{ steps.results.outputs.failed }}" != "0" ]; then 
            echo "::error title=Downstream Tests Failed::${{ steps.results.outputs.failed }} crate(s) failed compatibility tests"
            exit 1
          fi